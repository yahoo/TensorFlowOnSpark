# Copyright 2017, Yahoo Inc.
# Licensed under the terms of the apache license.  See the LICENSE file in the project root for terms
[metadata]
author = Lee Yang
author_email = leewyang@gmail.com
classifiers =
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: Apache Software License
    Topic :: Software Development :: Libraries
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
description = Deep learning with TensorFlow on Apache Spark clusters
license = Apache 2.0
long_description = file:README.md
long_description_content_type = text/markdown
name = tensorflowonspark
url = https://github.com/yahoo/TensorFlowOnSpark
version = 2.2.4

[options]
packages =
    tensorflowonspark

# The install_requires should include abstract package dependencies
# here (do not specify specific versions)

install_requires =
    packaging
    setuptools>38.0

# By default new packages require at minimum the current supported Python release.
python_requires = >="3.6"
zip_safe = True

[options.extras_require]
# This config section allows you to define optional dependencies.  For the general case, the defaults will
# work fine.  So these settings aren't required.  However, many of the screwdriver CI Pipeline steps
# will install the appropriate extras for that step.  This makes it possible to install packages that install
# or enhance the functionality of the CI Pipeline step.
# Such as packages that implement plugins or themes for the step in question.

# Additional packages for testing (test step)
# test =

# Additonal packages needed for documentation generation (doc_build/doc_publish steps)
# If you want to use a sphinx theme from a package, list it here.
# doc_build =

# Additional packages needed for mypy type checking
# mypy =

# Additional packages needed for pep8/pycodestyle style checking
# pycodestyle =

# Additional packages needed for pylint code analysis
# pylint =

[options.entry_points]
# Console script entry points are used to create wrapper scripts that run a specific function, the resulting wrapper
# is installed in the bin directory.

# They are defined using the following format:
#    scriptname = modulename:function
# console_scripts =
#     TFoS=ouroath.TFoS.cli:main

[screwdrivercd.version]
# Base the autoversion build number on the screwdriver build number
# This requires the CI Pipeline to have a build step that runs before
# any packaging steps.
version_type = sdv4_SD_BUILD

[bdist_wheel]
universal = 1
